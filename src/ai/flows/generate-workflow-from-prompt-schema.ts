
/**
 * @fileOverview Schemas for the incantation-driven workflow generation flow.
 */
import { z } from 'zod';
import { WorkflowNodeDataSchema } from '@/lib/types';

export const GenerateWorkflowFromPromptInputSchema = z.object({
  prompt: z.string().describe("The user's high-level natural language description of the desired workflow."),
});
export type GenerateWorkflowFromPromptInput = z.infer<typeof GenerateWorkflowFromPromptInputSchema>;


const GeneratedNodeSchema = WorkflowNodeDataSchema.pick({
    id: true,
    name: true,
    type: true,
    position: true,
    prompt: true,
}).describe("A single node generated by the AI architect.");

const GeneratedConnectionSchema = z.object({
    id: z.string().describe("A unique identifier for the connection, e.g., 'conn_1_2'."),
    sourceId: z.string().describe("The ID of the source node for this connection."),
    targetId: z.string().describe("The ID of the target node for this connection."),
}).describe("A connection or 'edge' between two nodes in the workflow.");


export const GenerateWorkflowFromPromptOutputSchema = z.object({
  nodes: z.array(GeneratedNodeSchema).describe("An array of all the nodes required for the workflow."),
  connections: z.array(GeneratedConnectionSchema).describe("An array of all the connections linking the nodes together."),
});
export type GenerateWorkflowFromPromptOutput = z.infer<typeof GenerateWorkflowFromPromptOutputSchema>;
